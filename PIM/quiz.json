[
    {
        "nivel-básico": {
            "modulo-1": "Módulo 1 - Introdução à lógica em Python ",

            "texto-1": "O objetivo é ensinar lógica de programação e estruturas básicas do Python, como variáveis, print() e input(). Lógica de programação é resolver problemas de forma organizada. Python é uma linguagem versátil usada em várias áreas. Exemplos: nome = 'julia' (variável) print('Olá mundo!') (exibir mensagem) idade = int(input('Qual a sua idade?')) (entrada do usuário)",

            "pergunta-1": "1. O que é lógica de programação e para que ela serve?",
            "alternativas-1": ["A) É uma linguagem usada apenas para programar jogos", 
            "B) É o processo de memorizar códigos de programação.", 
            "C) É o conjunto de regras que ensina o computador a pensar sozinho.", 
            "D) É a habilidade de organizar e resolver problemas de forma lógica e estruturada, criando soluções para serem aplicadas em programas."],
            "resposta-1": "D) É a habilidade de organizar e resolver problemas de forma lógica e estruturada, criando soluções para serem aplicadas em programas.",

            "pergunta-2": "2. Para que serve a função input() no Python?",
            "alternativas-2": ["A) Para exibir mensagens na tela", 
            "B) Para encerrar a execução do programa.", 
            "C) Para receber dados digitados pelo usuário.", 
            "D) Para criar variáveis automaticamente."],
            "resposta-2": "C) Para receber dados digitados pelo usuário.",

            "pergunta-3": "Como declarar uma variável chamada 'nome' com o valor 'Ana' em Python?",
            "alternativas-3": ["A) nome = 'Ana'", 
                            "B) var nome = 'Ana'", 
                    "C) string nome = 'Ana'", 
                    "D) nome: 'Ana'"],
            "resposta-3": "A) nome = 'Ana'"
        },

        "nivel-intermediario": {
            "modulo-1": "Módulo 1 - Introdução à lógica em Python ",

            "texto-2": "Funções são blocos de código usados para organizar e reutilizar tarefas.Elas são definidas com def, podem receber parâmetros (dados de entrada) e retornar valores com return. Exemplo básico:\n\ndef saudacao(nome):\n    print(\"Olá,\", nome)\nChamando: saudacao('Ana')\nAs funções tornam o código mais limpo e eficiente. ",

            "pergunta-1": "Qual palavra-chave usamos para criar uma função em Python?",
            "alternativas-1": ["A) def ", 
                            "B) function", 
                            "C) fun", 
                            "D) lambda"],
            "resposta-1": "A) def",

            "pergunta-2": "O que são parâmetros em uma função?",
            "alternativas-2": ["A) São valores fixos que a função retorna.", 
                             "B) São comandos que executam a função.",
                             "C) São variáveis que recebem valores quando a função é chamada.",
                             "D) São palavras-chave reservadas do Python."],
            "resposta-2": "C) São variáveis que recebem valores quando a função é chamada.",

            "pergunta-3": "Para que serve o comando return dentro de uma função?",    
            "alternativas-3": ["A) Para repetir a função várias vezes.",
                             "B) Para exibir uma mensagem na tela.",
                             "C) Para encerrar o programa imediatamente.",
                             "D) Para retornar um valor da função para quem a chamou."],
            "resposta-3": "D) Para retornar um valor da função para quem a chamou."
        }
    },
    {
        "nivel-avancado": {
            "modulo-1": "Módulo 1 - Introdução à lógica em Python ",

          "texto-3": "Dicionários são estruturas de dados que armazenam pares chave-valor. Eles são criados com {} e permitem acessar, adicionar, alterar e remover valores usando chaves únicas.",
          
        "pergunta-1": "Como você acessa o valor de uma chave em um dicionário em Python? ",
         
        "alternativas-1": ["A)dicionário.valor (chave)", "B)dicionario.getvalor(chave)", "C)dicionario[chave]", "D)dicionario->chave "],
         
        "resposta-1": "C) dicionario[chave] ",

        "pergunta-2": "Qual é a diferença entre os métodos .get() e o acesso direto com [] em um dicionário?",
         
        "alternativas-2": ["A) .get() é usado apenas com listas, e [] apenas com dicionários", 
        "B) .get() retorna um erro se a chave não existir, enquanto [] retorna None", 
        "C) .get() retorna None se a chave não existir, enquanto [] gera um erro", 
        "D) Não há diferença entre os dois, ambos funcionam exatamente igual"],
         
        "resposta-2" : "C) .get() retorna None se a chave não existir, enquanto [] gera um erro",

        "pergunta-3": "Como você adiciona ou altera um valor em um dicionário?",
        "alternativas": [
            "A) Usando append() com a chave e o valor",
            "B) Através do método add(chave, valor)",
            "C) Usando dicionario[chave] = valor",
            "D) Não é possível alterar valores em um dicionário"],
        "resposta-correta": "C" 
        }
    }
]